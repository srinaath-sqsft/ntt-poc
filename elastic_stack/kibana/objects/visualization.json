{
  "objects": [
   {
    "attributes": {
     "description": "",
     "kibanaSavedObjectMeta": {
      "searchSourceJSON": "{\"query\":{\"query\":\"\",\"language\":\"kuery\"},\"filter\":[]}"
     },
     "title": "APM user journey",
     "uiStateJSON": "{}",
     "version": 1,
     "visState": "{\"title\":\"APM user journey\",\"type\":\"vega\",\"aggs\":[],\"params\":{\"spec\":\"{\\n  $schema: https://vega.github.io/schema/vega/v5.json\\n  title: Expected path to convert the user\\n  autosize: {\\n    \\\"type\\\": \\\"fit\\\",\\n    \\\"contains\\\": \\\"padding\\\"\\n  }\\n  padding: 20\\n  \\\"data\\\": [\\n    {\\n      \\\"name\\\": \\\"status\\\",\\n      url: {\\n        %context%: true\\n        %timefield%: @timestamp\\n        index: traces-apm*,apm-*\\n        body: {\\n          size: 0,\\n          \\\"aggs\\\": {\\n    \\\"service\\\": {\\n      \\\"terms\\\": {\\n        \\\"field\\\": \\\"url.path\\\",\\n        \\\"order\\\": {\\n          \\\"_count\\\": \\\"desc\\\"\\n        },\\n        \\\"size\\\": 20\\n      }\\n    }\\n  }\\n        }\\n      }\\n      \\\"format\\\": {\\\"property\\\": \\\"aggregations.service.buckets\\\"},\\n      \\\"transform\\\": [\\n        {\\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"as\\\": \\\"name\\\",\\n          \\\"expr\\\": \\\"datum.key\\\"\\n        },\\n        {\\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"as\\\": \\\"name\\\",\\n          \\\"expr\\\": \\\"substring(datum.name,0,10) == '/products/' ? '/products' : datum.name\\\"\\n        }\\n      ]\\n    },\\n    {\\n      \\\"name\\\": \\\"resources\\\",\\n      url: {\\n        index: services\\n        body: {\\n          size: 100\\n          query: {\\n            \\\"bool\\\": {\\n      \\\"must\\\": [],\\n      \\\"filter\\\": [\\n        {\\n          \\\"bool\\\": {\\n            \\\"should\\\": [\\n              {\\n                \\\"match_phrase\\\": {\\n                  \\\"process\\\": \\\"customer journey\\\"\\n                }\\n              }\\n            ],\\n            \\\"minimum_should_match\\\": 1\\n          }\\n        }\\n      ],\\n      \\\"should\\\": [],\\n      \\\"must_not\\\": []\\n    }\\n          }\\n        }\\n      }\\n      \\\"format\\\": {\\\"property\\\": \\\"hits.hits\\\"},\\n      \\\"transform\\\": [\\n        {\\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"as\\\": \\\"name\\\",\\n          \\\"expr\\\": \\\"datum._source.service.name\\\"\\n        },\\n        {\\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"as\\\": \\\"type\\\",\\n          \\\"expr\\\": \\\"datum._source.type\\\"\\n        },\\n        {\\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"as\\\": \\\"connected_to\\\",\\n          \\\"expr\\\": \\\"datum._source.connected_to\\\"\\n        },\\n        {\\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"as\\\": \\\"connected_via\\\",\\n          \\\"expr\\\": \\\"datum._source.connected_via\\\"\\n        },\\n        {\\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"as\\\": \\\"size\\\",\\n          \\\"expr\\\": \\\"1\\\"\\n        },\\n        {\\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"as\\\": \\\"level\\\",\\n          \\\"expr\\\": \\\"datum._source.level\\\"\\n        },\\n        {\\n          \\\"type\\\": \\\"project\\\",\\n          \\\"fields\\\": [\\n            \\\"name\\\",\\n            \\\"type\\\",\\n            \\\"connected_to\\\",\\n            \\\"connected_via\\\",\\n            \\\"size\\\",\\n            \\\"level\\\"\\n          ],\\n          \\\"as\\\": [\\\"name\\\", \\\"type\\\", \\\"connected_to\\\", \\\"connected_via\\\",\\\"size\\\",\\\"level\\\"]\\n        }\\n      ]\\n      },\\n      {\\n        name: nodes\\n        source: resources\\n        transform: [\\n        {\\n            \\\"type\\\": \\\"aggregate\\\",\\n            \\\"groupby\\\": [\\\"type\\\", \\\"name\\\"],\\n            \\\"fields\\\": [\\\"size\\\"],\\n            \\\"as\\\": [\\\"size\\\"]\\n          },\\n          //{type: \\\"formula\\\", expr: \\\"1\\\", as: \\\"size\\\"},\\n          {\\n            type: lookup\\n            from: status\\n            key: name\\n            fields: [\\\"name\\\"]\\n            as: [\\\"status\\\"]\\n          },\\n          {type: \\\"formula\\\", expr: \\\"(datum.status == null ? 0 : datum.status.doc_count)\\\", as: \\\"status\\\"},\\n          {\\n            type: stack\\n            groupby: [\\\"type\\\"]\\n            sort: {field: \\\"name\\\", order: \\\"descending\\\"}\\n            field: size\\n            offset: center\\n          },\\n          {type: \\\"formula\\\", expr: \\\"(datum.y0)+0.5\\\", as: \\\"y0\\\"},\\n          {type: \\\"formula\\\", expr: \\\"(datum.y0+datum.y1)/2\\\", as: \\\"yc\\\"}\\n        ]\\n      },\\n      {\\n        name: links\\n        source: resources\\n        transform: [\\n          // find corresponding node from the right stack, keep it as \\\"target\\\"\\n          {\\n            type: lookup\\n            from: nodes\\n            key: name\\n            fields: [\\\"connected_to\\\"]\\n            as: [\\\"target\\\"]\\n          },\\n          {\\n            type: lookup\\n            from: nodes\\n            key: name\\n            fields: [\\\"name\\\"]\\n            as: [\\\"source\\\"]\\n          },\\n          {\\\"type\\\": \\\"filter\\\", \\\"expr\\\": \\\"datum.target != null\\\"}\\n          {\\n          type: formula\\n          expr: datum.target == null ? 0 : datum.target.yc\\n          as: targetYC\\n          },\\n          {\\n          type: formula\\n          expr: datum.target == null ? \\\"\\\" : datum.target.type\\n          as: targetType\\n          }\\n          // calculate SVG link path between stk1 and stk2 stacks for the node pair\\n          {\\n            type: linkpath\\n            orient: horizontal\\n            shape: diagonal\\n            sourceY: {expr: \\\"scale('y', datum.source.yc)\\\"}\\n            sourceX: {expr: \\\"scale('x', datum.type) + bandwidth('x')\\\"}\\n            targetY: {expr: \\\"scale('y', datum.targetYC)\\\"}\\n            targetX: {expr: \\\"scale('x', datum.targetType)\\\"}\\n         }\\n        ]\\n      }\\n    ]\\n\\n  scales: [\\n    {\\n      // calculates horizontal stack positioning\\n      name: x\\n      type: band\\n      range: width\\n      domain: {data: \\\"nodes\\\", field: \\\"type\\\"}\\n      paddingOuter: 0.05\\n      paddingInner: 0.90\\n    },\\n    {\\n      // this scale goes up as high as the highest y1 value of all nodes\\n      name: y\\n      type: linear\\n      range: height\\n      domain: {data: \\\"nodes\\\", field: \\\"y1\\\"}\\n    },\\n    {\\n      name: lineColor\\n      type: ordinal\\n      range: category\\n      domain: {data: \\\"resources\\\", field: \\\"connected_via\\\"}\\n    }\\n  ]\\n   \\n  marks: [\\n    {\\n      // draw the connecting line between stacks\\n      type: path\\n      name: linksMark\\n      from: {data: \\\"links\\\"}\\n      \\n      encode: {\\n        update: { \\n          path: {field: \\\"path\\\"}\\n          stroke: [\\n            {scale: \\\"lineColor\\\", field: \\\"connected_via\\\"}\\n          ]\\n        }\\n\\n      }\\n    },\\n    {\\n      // draw stack groups\\n      type: rect\\n      name: groupMark\\n      from: {data: \\\"nodes\\\"}\\n      encode: {\\n        enter: {\\n          \\\"fill\\\": [\\n            {\\\"test\\\": \\\"datum.status \u003e 0\\\", \\\"value\\\": \\\"green\\\"},\\n            {\\\"value\\\": \\\"gray\\\"}\\n          ],\\n          width: {scale: \\\"x\\\", band: 1},\\n          cursor: {\\\"value\\\": \\\"pointer\\\"},\\n          \\\"tooltip\\\": [\\n            {\\\"signal\\\": \\\"{'Hits': datum.status}\\\"}\\n          ]\\n        }\\n        update: {\\n          x: {scale: \\\"x\\\", field: \\\"type\\\"}\\n          y: {scale: \\\"y\\\", field: \\\"y0\\\"}\\n          y2: {scale: \\\"y\\\", field: \\\"y1\\\"}\\n        }\\n      }\\n    },\\n    {\\n      \\n      type: text\\n      from: {data: \\\"nodes\\\"}\\n      // don't process events for the labels - otherwise line mouseover is unclean\\n      interactive: false\\n      encode: {\\n        update: {\\n          // depending on which stack it is, position x with some padding\\n          x: {\\n            signal: scale('x', datum.type) + (bandwidth('x'))\\n          }\\n          // middle of the group\\n          yc: {signal: \\\"scale('y', datum.yc)-5\\\"}\\n          fontWeight: {value: \\\"bold\\\"}\\n          // only show text label if the group's height is large enough\\n          text: {signal: \\\"datum.name\\\"}\\n        }\\n      }\\n    }\\n  ]\\n}\\n\"}}"
    },
    "coreMigrationVersion": "8.4.0",
    "id": "cbf73930-1e2a-11ed-b680-cdb66fdb3638",
    "migrationVersion": {
     "visualization": "8.3.0"
    },
    "references": [],
    "sort": [
     1663232971581,
     1237
    ],
    "type": "visualization",
    "updated_at": "2022-09-15T09:09:31.581Z",
    "version": "Wzk2MDIsMV0="
   },
   {
    "attributes": {
     "description": "",
     "kibanaSavedObjectMeta": {
      "searchSourceJSON": "{\"query\":{\"query\":\"\",\"language\":\"kuery\"},\"filter\":[]}"
     },
     "title": "APM service map by vega",
     "uiStateJSON": "{}",
     "version": 1,
     "visState": "{\"title\":\"APM service map by vega\",\"type\":\"vega\",\"aggs\":[],\"params\":{\"spec\":\"{\\n  $schema: https://vega.github.io/schema/vega/v5.json\\n  title: Service map\\n  autosize: {\\n    \\\"type\\\": \\\"fit\\\",\\n    \\\"contains\\\": \\\"padding\\\"\\n  }\\n  padding: 20\\n  \\\"data\\\": [\\n    {\\n      \\\"name\\\": \\\"status\\\",\\n      url: {\\n        %context%: true\\n        %timefield%: @timestamp\\n        index: traces-apm*,apm-*\\n        body: {\\n          size: 0,\\n          \\\"aggs\\\": {\\n    \\\"service\\\": {\\n      \\\"terms\\\": {\\n        \\\"field\\\": \\\"service.name\\\",\\n        \\\"order\\\": {\\n          \\\"_count\\\": \\\"desc\\\"\\n        },\\n        \\\"size\\\": 20\\n      }\\n    }\\n  }\\n        }\\n      }\\n      \\\"format\\\": {\\\"property\\\": \\\"aggregations.service.buckets\\\"},\\n      \\\"transform\\\": [\\n        {\\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"as\\\": \\\"name\\\",\\n          \\\"expr\\\": \\\"datum.key\\\"\\n        }\\n      ]\\n    },\\n    {\\n      \\\"name\\\": \\\"resources\\\",\\n      url: {\\n        index: services\\n        body: {\\n          size: 100\\n          query: {\\n            \\\"bool\\\": {\\n      \\\"must\\\": [],\\n      \\\"filter\\\": [\\n        {\\n          \\\"bool\\\": {\\n            \\\"should\\\": [\\n              {\\n                \\\"match_phrase\\\": {\\n                  \\\"process\\\": \\\"apm services\\\"\\n                }\\n              }\\n            ],\\n            \\\"minimum_should_match\\\": 1\\n          }\\n        }\\n      ],\\n      \\\"should\\\": [],\\n      \\\"must_not\\\": []\\n    }\\n          }\\n        }\\n      }\\n      \\\"format\\\": {\\\"property\\\": \\\"hits.hits\\\"},\\n      \\\"transform\\\": [\\n        {\\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"as\\\": \\\"name\\\",\\n          \\\"expr\\\": \\\"datum._source.service.name\\\"\\n        },\\n        {\\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"as\\\": \\\"type\\\",\\n          \\\"expr\\\": \\\"datum._source.type\\\"\\n        },\\n        {\\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"as\\\": \\\"connected_to\\\",\\n          \\\"expr\\\": \\\"datum._source.connected_to\\\"\\n        },\\n        {\\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"as\\\": \\\"connected_via\\\",\\n          \\\"expr\\\": \\\"datum._source.connected_via\\\"\\n        },\\n        {\\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"as\\\": \\\"size\\\",\\n          \\\"expr\\\": \\\"1\\\"\\n        },\\n        {\\n          \\\"type\\\": \\\"formula\\\",\\n          \\\"as\\\": \\\"level\\\",\\n          \\\"expr\\\": \\\"datum._source.level\\\"\\n        },\\n        {\\n          \\\"type\\\": \\\"project\\\",\\n          \\\"fields\\\": [\\n            \\\"name\\\",\\n            \\\"type\\\",\\n            \\\"connected_to\\\",\\n            \\\"connected_via\\\",\\n            \\\"size\\\",\\n            \\\"level\\\"\\n          ],\\n          \\\"as\\\": [\\\"name\\\", \\\"type\\\", \\\"connected_to\\\", \\\"connected_via\\\",\\\"size\\\",\\\"level\\\"]\\n        }\\n      ]\\n      },\\n      {\\n        name: nodes\\n        source: resources\\n        transform: [\\n        {\\n            \\\"type\\\": \\\"aggregate\\\",\\n            \\\"groupby\\\": [\\\"type\\\", \\\"name\\\"],\\n            \\\"fields\\\": [\\\"size\\\"],\\n            \\\"as\\\": [\\\"size\\\"]\\n          },\\n          {type: \\\"formula\\\", expr: \\\"1\\\", as: \\\"size\\\"},\\n          {\\n            type: stack\\n            groupby: [\\\"type\\\"]\\n            sort: {field: \\\"name\\\", order: \\\"descending\\\"}\\n            field: size\\n            offset: center\\n          },\\n          {type: \\\"formula\\\", expr: \\\"(datum.y0)+0.5\\\", as: \\\"y0\\\"},\\n          {type: \\\"formula\\\", expr: \\\"(datum.y0+datum.y1)/2\\\", as: \\\"yc\\\"},\\n           {\\n            type: lookup\\n            from: status\\n            key: name\\n            fields: [\\\"name\\\"]\\n            as: [\\\"status\\\"]\\n          },\\n          {type: \\\"formula\\\", expr: \\\"(datum.status == null ? 0 : datum.status.doc_count)\\\", as: \\\"status\\\"}\\n        ]\\n      },\\n      {\\n        name: links\\n        source: resources\\n        transform: [\\n          // find corresponding node from the right stack, keep it as \\\"target\\\"\\n          {\\n            type: lookup\\n            from: nodes\\n            key: name\\n            fields: [\\\"connected_to\\\"]\\n            as: [\\\"target\\\"]\\n          },\\n          {\\n            type: lookup\\n            from: nodes\\n            key: name\\n            fields: [\\\"name\\\"]\\n            as: [\\\"source\\\"]\\n          },\\n          {\\\"type\\\": \\\"filter\\\", \\\"expr\\\": \\\"datum.target != null\\\"}\\n          {\\n          type: formula\\n          expr: datum.target == null ? 0 : datum.target.yc\\n          as: targetYC\\n          },\\n          {\\n          type: formula\\n          expr: datum.target == null ? \\\"\\\" : datum.target.type\\n          as: targetType\\n          }\\n          // calculate SVG link path between stk1 and stk2 stacks for the node pair\\n          {\\n            type: linkpath\\n            orient: horizontal\\n            shape: diagonal\\n            sourceY: {expr: \\\"scale('y', datum.source.yc)\\\"}\\n            sourceX: {expr: \\\"scale('x', datum.type) + bandwidth('x')\\\"}\\n            targetY: {expr: \\\"scale('y', datum.targetYC)\\\"}\\n            targetX: {expr: \\\"scale('x', datum.targetType)\\\"}\\n         }\\n        ]\\n      }\\n    ]\\n\\n  scales: [\\n    {\\n      // calculates horizontal stack positioning\\n      name: x\\n      type: band\\n      range: width\\n      domain: {data: \\\"nodes\\\", field: \\\"type\\\"}\\n      paddingOuter: 0.05\\n      paddingInner: 0.90\\n    },\\n    {\\n      // this scale goes up as high as the highest y1 value of all nodes\\n      name: y\\n      type: linear\\n      range: height\\n      domain: {data: \\\"nodes\\\", field: \\\"y1\\\"}\\n    },\\n    {\\n      name: lineColor\\n      type: ordinal\\n      range: category\\n      domain: {data: \\\"resources\\\", field: \\\"connected_via\\\"}\\n    }\\n  ]\\n  \\n  \\\"legends\\\": [\\n    {\\n      \\\"title\\\": \\\"Connection types\\\"\\n      \\\"fill\\\": \\\"lineColor\\\",\\n      \\\"orient\\\": \\\"top-left\\\",\\n      \\\"encode\\\": {\\n        \\\"title\\\": {\\\"update\\\": {\\\"fontSize\\\": {\\\"value\\\": 14}}},\\n        \\\"labels\\\": {\\n          \\\"interactive\\\": true,\\n          \\\"update\\\": {\\\"fontSize\\\": {\\\"value\\\": 12}, \\\"fill\\\": {\\\"value\\\": \\\"black\\\"}},\\n          \\\"hover\\\": {\\\"fill\\\": {\\\"value\\\": \\\"firebrick\\\"}}\\n        },\\n        \\\"symbols\\\": {\\\"update\\\": {\\\"stroke\\\": {\\\"value\\\": \\\"transparent\\\"}}},\\n        \\\"legend\\\": {\\\"update\\\": {}}\\n      }\\n    }\\n  ]\\n  \\n  marks: [\\n    {\\n      // draw the connecting line between stacks\\n      type: path\\n      name: linksMark\\n      from: {data: \\\"links\\\"}\\n      \\n      encode: {\\n        update: { \\n          path: {field: \\\"path\\\"}\\n          stroke: [\\n            {scale: \\\"lineColor\\\", field: \\\"connected_via\\\"}\\n          ]\\n        }\\n\\n      }\\n    },\\n    {\\n      // draw stack groups\\n      type: rect\\n      name: groupMark\\n      from: {data: \\\"nodes\\\"}\\n      encode: {\\n        enter: {\\n          \\\"fill\\\": [\\n            {\\\"test\\\": \\\"datum.status \u003e 0\\\", \\\"value\\\": \\\"green\\\"},\\n            {\\\"value\\\": \\\"gray\\\"}\\n          ],\\n          width: {scale: \\\"x\\\", band: 1},\\n          cursor: {\\\"value\\\": \\\"pointer\\\"}\\n        }\\n        update: {\\n          x: {scale: \\\"x\\\", field: \\\"type\\\"}\\n          y: {scale: \\\"y\\\", field: \\\"y0\\\"}\\n          y2: {scale: \\\"y\\\", field: \\\"y1\\\"}\\n        }\\n      }\\n    },\\n    {\\n      \\n      type: text\\n      from: {data: \\\"nodes\\\"}\\n      // don't process events for the labels - otherwise line mouseover is unclean\\n      interactive: false\\n      encode: {\\n        update: {\\n          // depending on which stack it is, position x with some padding\\n          x: {\\n            signal: scale('x', datum.type) + (bandwidth('x'))\\n          }\\n          // middle of the group\\n          yc: {signal: \\\"scale('y', datum.yc)-5\\\"}\\n          fontWeight: {value: \\\"bold\\\"}\\n          // only show text label if the group's height is large enough\\n          text: {signal: \\\"datum.name\\\"}\\n        }\\n      }\\n    }\\n  ]\\n}\\n\"}}"
    },
    "coreMigrationVersion": "8.4.0",
    "id": "f5b1cb60-1d5c-11ed-beaf-3173fdeba61f",
    "migrationVersion": {
     "visualization": "8.3.0"
    },
    "references": [],
    "sort": [
     1663064398998,
     1157
    ],
    "type": "visualization",
    "updated_at": "2022-09-13T10:19:58.998Z",
    "version": "WzEyMzQsMV0="
   }
  ]
 }