description = 'Ad Service'

def grpcVersion = "1.17.0"
def jacksonVersion = "2.9.6"
def apmVersion = "1.19.0"
def esVersion = "7.6.2"

group = "adservice"
version = "0.1.0-SNAPSHOT"

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.3'
        classpath "co.elastic.apm:apm-agent-attach:1.19.0"
        classpath "co.elastic.apm:apm-agent-api:1.19.0"
        classpath "org.elasticsearch.client:elasticsearch-rest-high-level-client:7.4.1"
        classpath "org.apache.logging.log4j:log4j-core:2.12.1"
        classpath "co.elastic.logging:log4j2-ecs-layout:0.5.2"
        classpath "org.apache.logging.log4j:log4j-slf4j18-impl:2.12.1"
    }
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'com.google.protobuf'

repositories {
    mavenCentral()
    mavenLocal()
}

tasks.withType(JavaCompile) {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

ext {
    speed = project.hasProperty('speed') ? project.getProperty('speed') : false
    offlineCompile = new File("$buildDir/output/lib")
}

dependencies {
    if (speed) {
        compile fileTree(dir: offlineCompile, include: '*.jar')
    } else {
        compile "com.google.api.grpc:proto-google-common-protos:1.12.0",
                "io.grpc:grpc-protobuf:${grpcVersion}",
                "io.grpc:grpc-stub:${grpcVersion}",
                "io.grpc:grpc-netty:${grpcVersion}",
                "io.grpc:grpc-services:${grpcVersion}",
                "co.elastic.apm:apm-agent-attach:${apmVersion}",
                //files('libs/apm-agent-attach-1.15.1-SNAPSHOT.jar'),
                "co.elastic.apm:apm-agent-api:${apmVersion}",

                "org.elasticsearch.client:elasticsearch-rest-high-level-client:${esVersion}",
                "co.elastic.logging:log4j2-ecs-layout:0.5.2",
                "org.apache.logging.log4j:log4j-slf4j18-impl:2.12.1",
                "org.apache.logging.log4j:log4j-core:2.12.1"

        runtime "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}",
                "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}",
                "io.netty:netty-tcnative-boringssl-static:2.0.8.Final",
                "co.elastic.apm:apm-agent-attach:${apmVersion}",
                //files('libs/apm-agent-attach-1.15.1-SNAPSHOT.jar'),
                "co.elastic.apm:apm-agent-api:${apmVersion}",
                "org.elasticsearch.client:elasticsearch-rest-high-level-client:${esVersion}",
                "co.elastic.logging:log4j2-ecs-layout:0.5.2",
                "org.apache.logging.log4j:log4j-slf4j18-impl:2.12.1",
                "org.apache.logging.log4j:log4j-core:2.12.1"
    }
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.5.1-1'
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
        ofSourceSet('main')
    }
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'gallivant'
            srcDirs 'build/generated/source/proto/main/java/gallivant'
            srcDirs 'build/generated/source/proto/main/grpc/gallivant'
        }
    }
}

// Provide convenience executables for trying out the examples.
apply plugin: 'application'

startScripts.enabled = false

// This to cache dependencies during Docker image building. First build will take time.
// Subsequent build will be incremental.
task downloadRepos(type: Copy) {
    from configurations.compile
    into offlineCompile
    from configurations.runtime
    into offlineCompile
}

task adService(type: CreateStartScripts) {
    mainClassName = 'gallivant.AdService'
    applicationName = 'AdService'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtime
}

task adServiceClient(type: CreateStartScripts) {
    mainClassName = 'gallivant.AdServiceClient'
    applicationName = 'AdServiceClient'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtime
}

applicationDistribution.into('bin') {
    from(adService)
    from(adServiceClient)
    fileMode = 0755
}
